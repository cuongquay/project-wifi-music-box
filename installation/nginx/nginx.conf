# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user              nginx;
# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes  1; 	#some last versions calculate it automatically, thanks to Diego :)

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

pid        /var/run/nginx.pid;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 16384;

    # optmized to serve many clients with each thread, essential for linux
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
    multi_accept on;
}

http {
    	include       /etc/nginx/mime.types;
    	default_type  application/octet-stream;

	log_format main '$remote_addr - $remote_user [$time_local] "$request" '  
            	    '$status $body_bytes_sent "$http_referer" '  
                    '"$http_user_agent"'; 

	# cache informations about FDs, frequently accessed files
	# can boost performance, but you need to test those values
	open_file_cache max=200000 inactive=20s; 
	open_file_cache_valid 30s; 
	open_file_cache_min_uses 2;
	open_file_cache_errors on;

	# only log critical errors
	error_log   /var/log/nginx/error.log crit;
	# to boost IO on HDD we can disable access logs
	access_log  /var/log/nginx/access.log  main;

	# copies data between one FD and other from within the kernel
	# faster then read() + write()
	sendfile on;


	# send headers in one peace, its better then sending them one by one 
	tcp_nopush on;

	# don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;

	# server will close connection after this time
	keepalive_timeout 30;

	# number of requests client can make over keep-alive -- for testing
	keepalive_requests 100000;

	# allow the server to close connection on non responding client, this will free up memory
	reset_timedout_connection on;

	# request timed out -- default 60
	client_body_timeout 10;

	client_max_body_size 10M;

	# if client stop responding, free up memory -- default 60
	send_timeout 2;

	# reduce the data that needs to be sent over network
	gzip on;
	gzip_min_length 10240;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
	gzip_disable "MSIE [1-6]\.";
    
	#	ssl_certificate  /etc/nginx/certs/server.crt;
	#	ssl_certificate_key  /etc/nginx/certs/server.pem;
	#	ssl_session_timeout  5m;
	#	ssl_protocols        SSLv3 TLSv1;
	#	ssl_ciphers          ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+EXP;
	#	ssl_prefer_server_ciphers   on;

    

	# Load config files from the /etc/nginx/conf.d directory
	# The default server is in conf.d/default.conf
	include /etc/nginx/conf.d/*.conf;
}
